apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubedb-monitor-control-plane
  namespace: kubedb-monitor
  labels:
    app: kubedb-monitor-control-plane
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubedb-monitor-control-plane
  template:
    metadata:
      labels:
        app: kubedb-monitor-control-plane
    spec:
      imagePullSecrets:
      - name: registry-secret
      containers:
      - name: control-plane
        image: registry.bitgaram.info/kubedb-monitor/control-plane:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: PORT
          value: "8080"
        - name: LOG_LEVEL
          value: "INFO"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubedb-monitor-agent
  namespace: kubedb-monitor
  labels:
    app: kubedb-monitor-agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubedb-monitor-agent
  template:
    metadata:
      labels:
        app: kubedb-monitor-agent
    spec:
      imagePullSecrets:
      - name: registry-secret
      containers:
      - name: agent
        image: registry.bitgaram.info/kubedb-monitor/agent:latest
        imagePullPolicy: Always
        env:
        - name: LONG_RUNNING_THRESHOLD_MS
          value: "4000"
        - name: COLLECTOR_TYPE
          value: "http"
        - name: COLLECTOR_ENDPOINT
          value: "http://kubedb-monitor-control-plane:8080/api/metrics"
        - name: DB_TYPES
          value: "postgresql"
        - name: SAMPLING_RATE
          value: "1.0"
        - name: SLOW_QUERY_THRESHOLD
          value: "50"
        - name: LOG_LEVEL
          value: "DEBUG"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubedb-monitor-dashboard
  namespace: kubedb-monitor
  labels:
    app: kubedb-monitor-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubedb-monitor-dashboard
  template:
    metadata:
      labels:
        app: kubedb-monitor-dashboard
    spec:
      imagePullSecrets:
      - name: registry-secret
      containers:
      - name: dashboard
        image: registry.bitgaram.info/kubedb-monitor/dashboard-frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: CONTROL_PLANE_URL
          value: "ws://kubedb-monitor-control-plane:8080"
        - name: WEBSOCKET_URL
          value: "wss://kube-db-mon-dashboard.bitgaram.info/ws"
        - name: NEXT_PUBLIC_LONG_RUNNING_THRESHOLD_MS
          value: "4000"
        - name: NEXT_PUBLIC_DASHBOARD_TITLE
          valueFrom:
            configMapKeyRef:
              name: kubedb-monitor-config
              key: dashboard.title
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: kubedb-monitor-control-plane
  namespace: kubedb-monitor
  labels:
    app: kubedb-monitor-control-plane
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: kubedb-monitor-control-plane

---
apiVersion: v1
kind: Service
metadata:
  name: kubedb-monitor-agent
  namespace: kubedb-monitor
  labels:
    app: kubedb-monitor-agent
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: kubedb-monitor-agent

---
apiVersion: v1
kind: Service
metadata:
  name: kubedb-monitor-dashboard
  namespace: kubedb-monitor
  labels:
    app: kubedb-monitor-dashboard
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: kubedb-monitor-dashboard

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubedb-monitor-config
  namespace: kubedb-monitor
data:
  # Agent Configuration
  agent.properties: |
    collector.type=http
    collector.endpoint=http://kubedb-monitor-control-plane:8080/api/metrics
    db.types=postgresql
    sampling.rate=1.0
    slow.query.threshold=50
    log.level=DEBUG
    long.running.threshold.ms=4000
    production.safe.mode=true
    deadlock.detection.enabled=true
    transaction.monitoring.enabled=true
    tps.monitoring.enabled=true
    sql.parameter.masking=true
    sensitive.data.protection=true
  
  # Control Plane Configuration
  control-plane.yaml: |
    server:
      port: 8080
      websocket:
        enabled: true
        path: /ws
    monitoring:
      metrics:
        enabled: true
        endpoint: /api/metrics
      health:
        enabled: true
        endpoint: /api/health
    logging:
      level: INFO
      format: json
  
  # Dashboard Configuration
  dashboard.env: |
    NODE_ENV=production
    NEXT_PUBLIC_LONG_RUNNING_THRESHOLD_MS=4000
    NEXT_PUBLIC_DASHBOARD_TITLE=ðŸš€ Advanced KubeDB Monitor Dashboard
    CONTROL_PLANE_URL=ws://kubedb-monitor-control-plane:8080
    WEBSOCKET_URL=wss://kube-db-mon-dashboard.bitgaram.info/ws
  
  # Dashboard Title
  dashboard.title: "ðŸš€ FlowLight DB Monitor Dashboard"