apiVersion: apps/v1
kind: Deployment
metadata:
  name: university-registration
  namespace: default
  labels:
    app: university-registration
spec:
  replicas: 1
  selector:
    matchLabels:
      app: university-registration
  template:
    metadata:
      labels:
        app: university-registration
      annotations:
        # KubeDB Monitor 활성화
        kubedb.monitor/enable: "true"
        kubedb.monitor/db-types: "h2"
        kubedb.monitor/sampling-rate: "1.0"
        kubedb.monitor/slow-query-threshold: "100"
        kubedb.monitor/collector-type: "http"
        kubedb.monitor/collector-endpoint: "http://kubedb-monitor-control-plane.kubedb-monitor:8080/api/metrics"
    spec:
      initContainers:
      - name: kubedb-agent-init
        image: registry.bitgaram.info/kubedb-monitor/kubedb-monitor-agent:latest
        command: ["sh", "-c"]
        args: ["cp /opt/kubedb-monitor-agent.jar /opt/kubedb-agent/"]
        volumeMounts:
        - name: kubedb-agent
          mountPath: /opt/kubedb-agent
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      containers:
      - name: university-registration
        image: registry.bitgaram.info/kubedb-monitor/university-registration:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        # Spring Boot 기본 설정
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        # Java 옵션과 KubeDB Agent 설정
        - name: JAVA_OPTS
          value: "-Xmx512m -Xms256m -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -javaagent:/opt/kubedb-agent/kubedb-monitor-agent.jar=db-types=h2,sampling-rate=1.0,slow-query-threshold=100,collector-type=http,collector-endpoint=http://kubedb-monitor-control-plane.kubedb-monitor:8080/api/metrics"
        # H2 데이터베이스 설정 (단순화)
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:h2:mem:testdb"
        - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
          value: "org.h2.Driver"
        - name: SPRING_DATASOURCE_USERNAME
          value: "sa"
        - name: SPRING_DATASOURCE_PASSWORD
          value: ""
        # JPA/Hibernate 설정
        - name: SPRING_JPA_HIBERNATE_DDL_AUTO
          value: "create-drop"
        - name: SPRING_JPA_SHOW_SQL
          value: "false"
        - name: SPRING_JPA_DATABASE_PLATFORM
          value: "org.hibernate.dialect.H2Dialect"
        - name: SPRING_JPA_DEFER_DATASOURCE_INITIALIZATION
          value: "true"
        - name: SPRING_JPA_HIBERNATE_NAMING_PHYSICAL_STRATEGY
          value: "org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl"
        # H2 콘솔 설정
        - name: SPRING_H2_CONSOLE_ENABLED
          value: "true"
        - name: SPRING_H2_CONSOLE_PATH
          value: "/h2-console"
        # 데이터 초기화 설정 (활성화)
        - name: APP_REGISTRATION_INITIALIZE_SAMPLE_DATA
          value: "true"
        # 로깅 설정
        - name: LOGGING_LEVEL_ROOT
          value: "INFO"
        - name: LOGGING_LEVEL_COM_UNIVERSITY_REGISTRATION
          value: "DEBUG"
        - name: LOGGING_LEVEL_ORG_HIBERNATE
          value: "WARN"
        - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK
          value: "INFO"
        - name: LOGGING_PATTERN_CONSOLE
          value: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
        volumeMounts:
        - name: kubedb-agent
          mountPath: /opt/kubedb-agent
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        # Health check 설정
        livenessProbe:
          httpGet:
            path: /api/actuator/health
            port: 8080
          initialDelaySeconds: 200
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/actuator/health
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
      volumes:
      - name: kubedb-agent
        emptyDir: {}
      imagePullSecrets:
      - name: registry-secret
---
apiVersion: v1
kind: Service
metadata:
  name: university-registration-service
  namespace: default
  labels:
    app: university-registration
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/api/actuator/prometheus"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: university-registration