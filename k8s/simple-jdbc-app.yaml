apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-jdbc-app
  namespace: default
  labels:
    app: simple-jdbc-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: simple-jdbc-app
  template:
    metadata:
      labels:
        app: simple-jdbc-app
    spec:
      initContainers:
      - name: kubedb-agent-init
        image: registry.bitgaram.info/kubedb-monitor/kubedb-monitor-agent:latest
        command: ["sh", "-c"]
        args: ["cp /opt/kubedb-monitor-agent.jar /opt/kubedb-agent/"]
        volumeMounts:
        - name: kubedb-agent
          mountPath: /opt/kubedb-agent
      containers:
      - name: simple-jdbc-app
        image: openjdk:17-jdk
        command: ["sh", "-c"]
        args:
        - |
          cd /tmp
          echo 'import java.sql.*;
          import java.util.Random;
          
          public class SimpleJDBCApp {
              public static void main(String[] args) throws Exception {
                  System.out.println("üöÄ Starting Simple JDBC App with KubeDB Agent...");
                  
                  // H2 Database URL
                  String url = "jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1";
                  String user = "sa";
                  String password = "";
                  
                  Connection conn = DriverManager.getConnection(url, user, password);
                  
                  // Create tables
                  conn.createStatement().execute("CREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100))");
                  conn.createStatement().execute("CREATE TABLE orders (id INT PRIMARY KEY, user_id INT, product VARCHAR(100), amount DECIMAL(10,2))");
                  
                  // Insert sample data
                  PreparedStatement userStmt = conn.prepareStatement("INSERT INTO users VALUES (?, ?, ?)");
                  PreparedStatement orderStmt = conn.prepareStatement("INSERT INTO orders VALUES (?, ?, ?, ?)");
                  
                  // Generate realistic demo data
                  String[] names = {"ÍπÄÏ≤†Ïàò", "Ïù¥ÏòÅÌù¨", "Î∞ïÎØºÏàò", "ÏµúÏßÄÏùÄ", "Ï†ïÌòÑÏö∞"};
                  String[] products = {"ÎÖ∏Ìä∏Î∂Å", "ÎßàÏö∞Ïä§", "ÌÇ§Î≥¥Îìú", "Î™®ÎãàÌÑ∞", "Ïä§ÌîºÏª§"};
                  
                  Random rand = new Random();
                  
                  while (true) {
                      // Insert users
                      for (int i = 1; i <= 5; i++) {
                          userStmt.setInt(1, i);
                          userStmt.setString(2, names[i-1]);
                          userStmt.setString(3, names[i-1].toLowerCase() + "@example.com");
                          userStmt.executeUpdate();
                      }
                      
                      // Insert orders
                      for (int i = 1; i <= 10; i++) {
                          orderStmt.setInt(1, i);
                          orderStmt.setInt(2, rand.nextInt(5) + 1);
                          orderStmt.setString(3, products[rand.nextInt(products.length)]);
                          orderStmt.setDouble(4, 100 + rand.nextDouble() * 900);
                          orderStmt.executeUpdate();
                      }
                      
                      // Execute various queries
                      ResultSet rs = conn.createStatement().executeQuery("SELECT * FROM users");
                      System.out.println("üìä Queried users table");
                      rs.close();
                      
                      rs = conn.createStatement().executeQuery("SELECT * FROM orders");
                      System.out.println("üìä Queried orders table");
                      rs.close();
                      
                      rs = conn.createStatement().executeQuery("SELECT u.name, COUNT(o.id) as order_count FROM users u LEFT JOIN orders o ON u.id = o.user_id GROUP BY u.id, u.name");
                      System.out.println("üìä Executed complex JOIN query");
                      rs.close();
                      
                      // Clean up for next cycle
                      conn.createStatement().execute("DELETE FROM orders");
                      conn.createStatement().execute("DELETE FROM users");
                      System.out.println("üîÑ Completed cycle, waiting 5 seconds...");
                      
                      Thread.sleep(5000);
                  }
              }
          }' > SimpleJDBCApp.java
          
          # Download H2 JAR using curl
          apt update && apt install -y curl
          curl -s https://repo1.maven.org/maven2/com/h2database/h2/2.2.224/h2-2.2.224.jar -o h2.jar
          
          # Compile and run with KubeDB Agent
          javac -cp h2.jar SimpleJDBCApp.java
          java -javaagent:/opt/kubedb-agent/kubedb-monitor-agent.jar=db-types=h2,collector-type=http,collector-endpoint=http://kubedb-monitor-control-plane.kubedb-monitor:8080/api/metrics -cp .:h2.jar SimpleJDBCApp
        
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: kubedb-agent
          mountPath: /opt/kubedb-agent
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"
      volumes:
      - name: kubedb-agent
        emptyDir: {}
      imagePullSecrets:
      - name: registry-secret
---
apiVersion: v1
kind: Service
metadata:
  name: simple-jdbc-app-service
  namespace: default
  labels:
    app: simple-jdbc-app
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: simple-jdbc-app