apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-test-app
  namespace: kubedb-monitor-test
  labels:
    app: simple-test-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: simple-test-app
  template:
    metadata:
      labels:
        app: simple-test-app
      annotations:
        # KubeDB Monitor 활성화
        kubedb.monitor/enable: "true"
        kubedb.monitor/db-types: "h2"
        kubedb.monitor/sampling-rate: "1.0"
        kubedb.monitor/slow-query-threshold: "100"
    spec:
      containers:
      - name: app
        image: openjdk:17-jdk-slim
        ports:
        - containerPort: 8080
        env:
        - name: JAVA_OPTS
          value: "-Xmx256m -Xms128m"
        command:
        - /bin/bash
        - -c
        - |
          # Simple Spring Boot app simulation
          mkdir -p /tmp/app
          cd /tmp/app
          cat > App.java << 'EOF'
          import java.sql.*;
          import java.util.concurrent.Executors;
          import java.util.concurrent.ScheduledExecutorService;
          import java.util.concurrent.TimeUnit;
          
          public class App {
              private static final String DB_URL = "jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE";
              private static Connection conn;
              
              public static void main(String[] args) throws Exception {
                  System.out.println("Simple DB Test App Starting...");
                  
                  // Initialize H2 database
                  Class.forName("org.h2.Driver");
                  conn = DriverManager.getConnection(DB_URL, "sa", "");
                  
                  // Create table
                  try (Statement stmt = conn.createStatement()) {
                      stmt.execute("CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT, name VARCHAR(50), email VARCHAR(100))");
                      System.out.println("Table created successfully");
                  }
                  
                  // Insert sample data
                  insertSampleData();
                  
                  // Start periodic queries
                  ScheduledExecutorService executor = Executors.newScheduledThreadPool(2);
                  executor.scheduleAtFixedRate(App::performQueries, 0, 2, TimeUnit.SECONDS);
                  
                  System.out.println("App is running. Performing database operations every 2 seconds...");
                  
                  // Keep app running
                  Thread.currentThread().join();
              }
              
              private static void insertSampleData() throws SQLException {
                  String sql = "INSERT INTO users (name, email) VALUES (?, ?)";
                  try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                      for (int i = 1; i <= 10; i++) {
                          pstmt.setString(1, "User" + i);
                          pstmt.setString(2, "user" + i + "@test.com");
                          pstmt.executeUpdate();
                      }
                      System.out.println("Sample data inserted");
                  }
              }
              
              private static void performQueries() {
                  try {
                      // Simulate different types of queries
                      
                      // Fast query
                      try (Statement stmt = conn.createStatement()) {
                          ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM users");
                          if (rs.next()) {
                              System.out.println("User count: " + rs.getInt(1));
                          }
                      }
                      
                      // Medium query with JOIN simulation
                      try (PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM users WHERE name LIKE ?")) {
                          pstmt.setString(1, "User%");
                          ResultSet rs = pstmt.executeQuery();
                          int count = 0;
                          while (rs.next()) {
                              count++;
                          }
                          System.out.println("Found users: " + count);
                      }
                      
                      // Slow query simulation
                      try (Statement stmt = conn.createStatement()) {
                          stmt.executeQuery("SELECT u1.*, u2.* FROM users u1 CROSS JOIN users u2 WHERE u1.id < u2.id");
                      }
                      
                      // Insert new data periodically
                      if (System.currentTimeMillis() % 10000 < 2000) {
                          String sql = "INSERT INTO users (name, email) VALUES (?, ?)";
                          try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                              String timestamp = String.valueOf(System.currentTimeMillis());
                              pstmt.setString(1, "Dynamic" + timestamp.substring(timestamp.length()-4));
                              pstmt.setString(2, "dynamic" + timestamp + "@test.com");
                              pstmt.executeUpdate();
                          }
                      }
                      
                  } catch (SQLException e) {
                      System.err.println("Query error: " + e.getMessage());
                  }
              }
          }
          EOF
          
          # Download H2 database JAR
          curl -L -o h2.jar https://repo1.maven.org/maven2/com/h2database/h2/2.2.224/h2-2.2.224.jar
          
          # Compile and run
          javac -cp h2.jar App.java
          java -cp .:h2.jar App
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: simple-test-app-service
  namespace: kubedb-monitor-test
  labels:
    app: simple-test-app
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: simple-test-app