apiVersion: v1
kind: ConfigMap
metadata:
  name: load-test-scripts
  namespace: kubedb-monitor-test
data:
  basic-load-test.sh: |
    #!/bin/bash
    echo "=== KubeDB Monitor Load Test Starting ==="
    
    BASE_URL="http://university-app-service.kubedb-monitor-test.svc.cluster.local:8080"
    
    echo "Testing application connectivity..."
    curl -f $BASE_URL/actuator/health || { echo "App not ready"; exit 1; }
    
    echo "Starting load test scenarios..."
    
    # Scenario 1: Health checks (fast queries)
    echo "Scenario 1: Health checks (50 requests, 10 concurrent)"
    ab -n 50 -c 10 $BASE_URL/actuator/health
    
    # Scenario 2: API endpoints (medium queries)  
    echo "Scenario 2: Student registration queries (100 requests, 5 concurrent)"
    ab -n 100 -c 5 $BASE_URL/api/students
    
    # Scenario 3: Course queries (complex queries)
    echo "Scenario 3: Course search with enrollment data (200 requests, 3 concurrent)"
    ab -n 200 -c 3 $BASE_URL/api/courses
    
    # Scenario 4: High load simulation
    echo "Scenario 4: High load simulation (500 requests, 20 concurrent)"
    ab -n 500 -c 20 $BASE_URL/api/enrollments
    
    echo "Load test completed. Check KubeDB Monitor metrics!"

  monitoring-check.sh: |
    #!/bin/bash
    echo "=== KubeDB Monitor Metrics Check ==="
    
    POD_NAME=$(kubectl get pods -n kubedb-monitor-test -l app=university-app -o jsonpath='{.items[0].metadata.name}')
    
    if [ -z "$POD_NAME" ]; then
        echo "University app pod not found"
        exit 1
    fi
    
    echo "Checking pod: $POD_NAME"
    
    # Check if agent is loaded
    echo "=== Agent Status ==="
    kubectl logs -n kubedb-monitor-test $POD_NAME | grep -i "kubedb.*agent" | tail -10
    
    # Check JDBC transformations
    echo "=== JDBC Transformations ==="
    kubectl logs -n kubedb-monitor-test $POD_NAME | grep "Successfully transformed" | wc -l
    echo "classes transformed"
    
    # Check for database queries
    echo "=== Recent Database Activity ==="
    kubectl logs -n kubedb-monitor-test $POD_NAME --tail=50 | grep -E "(SELECT|INSERT|UPDATE|DELETE)" | tail -10
    
    # Check JMX metrics if available
    echo "=== JMX Metrics Check ==="
    kubectl exec -n kubedb-monitor-test $POD_NAME -- curl -s http://localhost:8080/actuator/metrics | grep -i db || echo "No DB metrics found via actuator"
    
    echo "=== Performance Monitoring Active ==="

  stress-test.sh: |
    #!/bin/bash
    echo "=== Intensive Database Stress Test ==="
    
    BASE_URL="http://university-app-service.kubedb-monitor-test.svc.cluster.local:8080"
    
    # Verify app is ready
    curl -f $BASE_URL/actuator/health || { echo "App not ready"; exit 1; }
    
    echo "Running intensive stress test..."
    
    # Multiple concurrent load patterns
    for i in {1..3}; do
        echo "Stress round $i/3"
        
        # Heavy course queries
        ab -n 300 -c 15 -t 60 $BASE_URL/api/courses &
        
        # Student operations
        ab -n 200 -c 10 -t 45 $BASE_URL/api/students &
        
        # Enrollment operations  
        ab -n 400 -c 20 -t 90 $BASE_URL/api/enrollments &
        
        # Wait for this round
        wait
        
        echo "Round $i completed. Waiting 10 seconds..."
        sleep 10
    done
    
    echo "Stress test completed!"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-test-runner
  namespace: kubedb-monitor-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: load-test-runner
  template:
    metadata:
      labels:
        app: load-test-runner
    spec:
      containers:
      - name: load-tester
        image: httpd:2.4-alpine
        command: ["sleep", "3600"]
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
      - name: kubectl
        image: bitnami/kubectl:latest
        command: ["sleep", "3600"]
        volumeMounts:
        - name: scripts
          mountPath: /scripts
      volumes:
      - name: scripts
        configMap:
          name: load-test-scripts
          defaultMode: 0755