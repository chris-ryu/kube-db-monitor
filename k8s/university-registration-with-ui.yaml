apiVersion: apps/v1
kind: Deployment
metadata:
  name: university-registration-demo
  namespace: kubedb-monitor-test
  labels:
    app: university-registration-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: university-registration-demo
  template:
    metadata:
      labels:
        app: university-registration-demo
      annotations:
        # KubeDB Monitor 활성화 - PostgreSQL 설정 (안전 모드)
        kubedb.monitor/enable: "true"
        kubedb.monitor/db-types: "postgresql"
        kubedb.monitor/sampling-rate: "0.1"
        kubedb.monitor/slow-query-threshold: "100"
        kubedb.monitor/collector-type: "http"
        kubedb.monitor/log-level: "WARN"
    spec:
      # KubeDB Agent를 수동으로 주입 (Admission Webhook가 없는 경우)
      initContainers:
      - name: kubedb-agent-init
        image: registry.bitgaram.info/kubedb-monitor/agent:latest
        command: ["/bin/sh", "-c"]
        args: 
        - |
          echo "Copying KubeDB Monitor Agent..."
          cp /opt/kubedb-agent/kubedb-monitor-agent.jar /opt/shared-agent/kubedb-monitor-agent.jar
          echo "Agent copied successfully"
          ls -la /opt/shared-agent/
        volumeMounts:
        - name: kubedb-agent
          mountPath: /opt/shared-agent
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      containers:
      - name: university-registration
        image: registry.bitgaram.info/kubedb-monitor/university-registration:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        # Spring Boot 프로파일
        - name: SPRING_PROFILES_ACTIVE
          value: "development"
        # Java 옵션과 KubeDB Agent (안전 모드)
        - name: JAVA_OPTS
          value: "-Xmx512m -Xms256m -XX:+UseG1GC -javaagent:/opt/kubedb-agent/kubedb-monitor-agent.jar=db-types=postgresql,sampling-rate=0.1,slow-query-threshold=100,collector-type=http,collector-endpoint=http://kubedb-monitor-control-plane.kubedb-monitor:8080/api/metrics,log-level=WARN,postgresql-fix-unknown-types-value=true,postgresql-strict-compatibility=true,safe-transformation-mode=true"
        
        # PostgreSQL 연결 설정 (이전에 작동했던 설정)
        - name: SPRING_DATASOURCE_JDBC_URL
          value: "jdbc:postgresql://postgres-cluster-rw.postgres-system:5432/university"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres-cluster-rw.postgres-system:5432/university"
        - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
          value: "org.postgresql.Driver"
        - name: SPRING_DATASOURCE_USERNAME
          value: "univ-app"
        - name: SPRING_DATASOURCE_PASSWORD
          value: "qlcrkfka1#"
        
        # HikariCP PostgreSQL 설정
        - name: SPRING_DATASOURCE_HIKARI_JDBC_URL
          value: "jdbc:postgresql://postgres-cluster-rw.postgres-system:5432/university"
        - name: SPRING_DATASOURCE_HIKARI_DRIVER_CLASS_NAME
          value: "org.postgresql.Driver"
        - name: SPRING_DATASOURCE_HIKARI_USERNAME
          value: "univ-app"
        - name: SPRING_DATASOURCE_HIKARI_PASSWORD
          value: "qlcrkfka1#"
        - name: SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE
          value: "10"
        - name: SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE
          value: "2"
        - name: SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT
          value: "30000"
        - name: SPRING_DATASOURCE_HIKARI_AUTO_COMMIT
          value: "false"
        
        # 트랜잭션 관리 설정
        - name: SPRING_JPA_PROPERTIES_HIBERNATE_CONNECTION_AUTOCOMMIT
          value: "true"
        - name: SPRING_TRANSACTION_DEFAULT_TIMEOUT
          value: "30"
        
        # JPA/Hibernate PostgreSQL 설정
        - name: SPRING_JPA_HIBERNATE_DDL_AUTO
          value: "create-drop"
        - name: SPRING_JPA_SHOW_SQL
          value: "false"
        - name: SPRING_JPA_DATABASE_PLATFORM
          value: "org.hibernate.dialect.PostgreSQLDialect"
        - name: SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL
          value: "false"
        - name: SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_LOB_NON_CONTEXTUAL_CREATION
          value: "true"
        - name: SPRING_JPA_PROPERTIES_HIBERNATE_TEMP_USE_JDBC_METADATA_DEFAULTS
          value: "false"
        
        # 데이터 초기화 활성화 (Pod 재시작 시 자동 데이터 생성)
        - name: APP_REGISTRATION_INITIALIZE_SAMPLE_DATA
          value: "true"
        
        # KubeDB Monitor HTTP endpoint for metrics collection
        - name: KUBEDB_MONITOR_HTTP_ENDPOINT
          value: "http://kubedb-monitor-control-plane.kubedb-monitor:8080/api/metrics"
        
        # Kubernetes Pod와 Namespace 정보
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        # 로깅 설정 (KubeDB 모니터링이 잘 보이도록)
        - name: LOGGING_LEVEL_ROOT
          value: "INFO"
        - name: LOGGING_LEVEL_COM_UNIVERSITY_REGISTRATION
          value: "DEBUG"
        - name: LOGGING_LEVEL_IO_KUBEDB_MONITOR
          value: "DEBUG"
        - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_JDBC
          value: "DEBUG"
        - name: LOGGING_PATTERN_CONSOLE
          value: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
        
        volumeMounts:
        - name: kubedb-agent
          mountPath: /opt/kubedb-agent
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      
      volumes:
      - name: kubedb-agent
        emptyDir: {}
      
      imagePullSecrets:
      - name: registry-secret

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: university-registration-ui
  namespace: kubedb-monitor-test
  labels:
    app: university-registration-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: university-registration-ui
  template:
    metadata:
      labels:
        app: university-registration-ui
    spec:
      containers:
      - name: ui
        image: registry.bitgaram.info/kubedb-monitor/university-registration-ui:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: UNIVERSITY_API_URL
          value: "http://university-registration-demo-service:80"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
      
      imagePullSecrets:
      - name: registry-secret

---
apiVersion: v1
kind: Service
metadata:
  name: university-registration-demo-service
  namespace: kubedb-monitor-test
  labels:
    app: university-registration-demo
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: university-registration-demo

---
apiVersion: v1
kind: Service
metadata:
  name: university-registration-ui-service
  namespace: kubedb-monitor-test
  labels:
    app: university-registration-ui
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: university-registration-ui

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: university-registration-demo-ingress
  namespace: kubedb-monitor-test
  labels:
    app: university-registration-demo
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300" 
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - university-registration.bitgaram.info
    secretName: university-registration-tls
  rules:
  - host: university-registration.bitgaram.info
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: university-registration-demo-service
            port:
              number: 80
      - path: /api/actuator
        pathType: Prefix
        backend:
          service:
            name: university-registration-demo-service
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: university-registration-ui-service
            port:
              number: 80