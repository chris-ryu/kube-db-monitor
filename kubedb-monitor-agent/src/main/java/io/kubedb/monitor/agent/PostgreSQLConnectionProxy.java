package io.kubedb.monitor.agent;

import io.kubedb.monitor.common.deadlock.DeadlockDetector;
import io.kubedb.monitor.common.transaction.TransactionRegistry;
import io.kubedb.monitor.common.transaction.TransactionStatus;

import java.sql.*;
import java.util.Map;
import java.util.Optional;
import java.util.Properties;
import java.util.concurrent.Executor;
import java.util.logging.Logger;

/**
 * PostgreSQL Connection 프록시
 * 
 * ASM 바이트코드 변환의 한계를 극복하기 위해 Connection 레벨에서 안전한 모니터링을 제공합니다.
 * PreparedStatement 생성 시점에서 PostgreSQL 호환 프록시 객체를 반환하여
 * "Unknown Types value" 에러를 방지하고, Transaction/Deadlock 모니터링을 수행합니다.
 */
public class PostgreSQLConnectionProxy implements Connection {
    private static final Logger logger = Logger.getLogger(PostgreSQLConnectionProxy.class.getName());
    
    private final Connection delegate;
    private final PostgreSQLCompatibilityHelper compatibilityHelper;
    private final AgentConfig config;
    
    // Transaction 모니터링을 위한 컴포넌트들
    private final TransactionAwareJDBCInterceptor transactionInterceptor;
    private final String connectionId;
    
    public PostgreSQLConnectionProxy(Connection delegate, AgentConfig config) {
        this.delegate = delegate;
        this.config = config;
        this.compatibilityHelper = new PostgreSQLCompatibilityHelper(config);
        this.connectionId = generateConnectionId(delegate);
        
        // Transaction 모니터링 초기화
        TransactionRegistry transactionRegistry = new TransactionRegistry();
        DeadlockDetector deadlockDetector = new DeadlockDetector();
        this.transactionInterceptor = new TransactionAwareJDBCInterceptor(transactionRegistry, deadlockDetector);
        
        logger.info(String.format("[KubeDB] PostgreSQL Connection 프록시 활성화 (Transaction 모니터링 포함) - %s [%s]", 
                   delegate.getClass().getSimpleName(), connectionId));
    }
    
    private String generateConnectionId(Connection connection) {
        return "conn_" + System.identityHashCode(connection) + "_" + System.currentTimeMillis();
    }
    
    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        logger.fine("[KubeDB] PostgreSQL PreparedStatement 생성: " + 
                   (sql.length() > 100 ? sql.substring(0, 100) + "..." : sql));
        
        PreparedStatement stmt = delegate.prepareStatement(sql);
        return new PostgreSQLPreparedStatementProxy(stmt, sql, compatibilityHelper, transactionInterceptor);
    }
    
    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        PreparedStatement stmt = delegate.prepareStatement(sql, resultSetType, resultSetConcurrency);
        return new PostgreSQLPreparedStatementProxy(stmt, sql, compatibilityHelper, transactionInterceptor);
    }
    
    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        PreparedStatement stmt = delegate.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        return new PostgreSQLPreparedStatementProxy(stmt, sql, compatibilityHelper, transactionInterceptor);
    }
    
    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        PreparedStatement stmt = delegate.prepareStatement(sql, autoGeneratedKeys);
        return new PostgreSQLPreparedStatementProxy(stmt, sql, compatibilityHelper, transactionInterceptor);
    }
    
    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        PreparedStatement stmt = delegate.prepareStatement(sql, columnIndexes);
        return new PostgreSQLPreparedStatementProxy(stmt, sql, compatibilityHelper, transactionInterceptor);
    }
    
    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        PreparedStatement stmt = delegate.prepareStatement(sql, columnNames);
        return new PostgreSQLPreparedStatementProxy(stmt, sql, compatibilityHelper, transactionInterceptor);
    }
    
    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        CallableStatement stmt = delegate.prepareCall(sql);
        return new PostgreSQLCallableStatementProxy(stmt, sql, compatibilityHelper, transactionInterceptor);
    }
    
    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        CallableStatement stmt = delegate.prepareCall(sql, resultSetType, resultSetConcurrency);
        return new PostgreSQLCallableStatementProxy(stmt, sql, compatibilityHelper, transactionInterceptor);
    }
    
    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        CallableStatement stmt = delegate.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        return new PostgreSQLCallableStatementProxy(stmt, sql, compatibilityHelper, transactionInterceptor);
    }
    
    // 나머지 Connection 메서드들은 delegate에 위임
    @Override
    public Statement createStatement() throws SQLException {
        return delegate.createStatement();
    }
    
    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return delegate.createStatement(resultSetType, resultSetConcurrency);
    }
    
    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return delegate.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
    }
    
    @Override
    public String nativeSQL(String sql) throws SQLException {
        return delegate.nativeSQL(sql);
    }
    
    @Override
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        logger.fine("[KubeDB] PostgreSQL Connection autoCommit 변경: " + autoCommit + " [" + connectionId + "]");
        
        // Transaction 모니터링: setAutoCommit 호출 전에 인터셉터에 알림
        try {
            transactionInterceptor.onSetAutoCommit(delegate, autoCommit);
        } catch (Exception e) {
            logger.warning("[KubeDB] Transaction 모니터링 중 오류 발생: " + e.getMessage());
        }
        
        delegate.setAutoCommit(autoCommit);
    }
    
    @Override
    public boolean getAutoCommit() throws SQLException {
        return delegate.getAutoCommit();
    }
    
    @Override
    public void commit() throws SQLException {
        logger.fine("[KubeDB] PostgreSQL Connection commit 실행 [" + connectionId + "]");
        
        // Transaction 모니터링: commit 전에 인터셉터에 알림
        try {
            transactionInterceptor.onTransactionCommit(delegate);
        } catch (Exception e) {
            logger.warning("[KubeDB] Transaction commit 모니터링 중 오류 발생: " + e.getMessage());
        }
        
        delegate.commit();
    }
    
    @Override
    public void rollback() throws SQLException {
        logger.fine("[KubeDB] PostgreSQL Connection rollback 실행 [" + connectionId + "]");
        
        // Transaction 모니터링: rollback 전에 인터셉터에 알림
        try {
            transactionInterceptor.onTransactionRollback(delegate);
        } catch (Exception e) {
            logger.warning("[KubeDB] Transaction rollback 모니터링 중 오류 발생: " + e.getMessage());
        }
        
        delegate.rollback();
    }
    
    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        logger.fine("[KubeDB] PostgreSQL Connection rollback to savepoint 실행 [" + connectionId + "]");
        
        // Transaction 모니터링: savepoint rollback 전에 인터셉터에 알림  
        try {
            transactionInterceptor.onTransactionRollback(delegate);
        } catch (Exception e) {
            logger.warning("[KubeDB] Transaction savepoint rollback 모니터링 중 오류 발생: " + e.getMessage());
        }
        
        delegate.rollback(savepoint);
    }
    
    @Override
    public void close() throws SQLException {
        logger.fine("[KubeDB] PostgreSQL Connection 종료");
        delegate.close();
    }
    
    @Override
    public boolean isClosed() throws SQLException {
        return delegate.isClosed();
    }
    
    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return delegate.getMetaData();
    }
    
    @Override
    public void setReadOnly(boolean readOnly) throws SQLException {
        delegate.setReadOnly(readOnly);
    }
    
    @Override
    public boolean isReadOnly() throws SQLException {
        return delegate.isReadOnly();
    }
    
    @Override
    public void setCatalog(String catalog) throws SQLException {
        delegate.setCatalog(catalog);
    }
    
    @Override
    public String getCatalog() throws SQLException {
        return delegate.getCatalog();
    }
    
    @Override
    public void setTransactionIsolation(int level) throws SQLException {
        delegate.setTransactionIsolation(level);
    }
    
    @Override
    public int getTransactionIsolation() throws SQLException {
        return delegate.getTransactionIsolation();
    }
    
    @Override
    public SQLWarning getWarnings() throws SQLException {
        return delegate.getWarnings();
    }
    
    @Override
    public void clearWarnings() throws SQLException {
        delegate.clearWarnings();
    }
    
    @Override
    public Map<String, Class<?>> getTypeMap() throws SQLException {
        return delegate.getTypeMap();
    }
    
    @Override
    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        delegate.setTypeMap(map);
    }
    
    @Override
    public void setHoldability(int holdability) throws SQLException {
        delegate.setHoldability(holdability);
    }
    
    @Override
    public int getHoldability() throws SQLException {
        return delegate.getHoldability();
    }
    
    @Override
    public Savepoint setSavepoint() throws SQLException {
        return delegate.setSavepoint();
    }
    
    @Override
    public Savepoint setSavepoint(String name) throws SQLException {
        return delegate.setSavepoint(name);
    }
    
    @Override
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        delegate.releaseSavepoint(savepoint);
    }
    
    @Override
    public Clob createClob() throws SQLException {
        return delegate.createClob();
    }
    
    @Override
    public Blob createBlob() throws SQLException {
        return delegate.createBlob();
    }
    
    @Override
    public NClob createNClob() throws SQLException {
        return delegate.createNClob();
    }
    
    @Override
    public SQLXML createSQLXML() throws SQLException {
        return delegate.createSQLXML();
    }
    
    @Override
    public boolean isValid(int timeout) throws SQLException {
        return delegate.isValid(timeout);
    }
    
    @Override
    public void setClientInfo(String name, String value) throws SQLClientInfoException {
        delegate.setClientInfo(name, value);
    }
    
    @Override
    public void setClientInfo(Properties properties) throws SQLClientInfoException {
        delegate.setClientInfo(properties);
    }
    
    @Override
    public String getClientInfo(String name) throws SQLException {
        return delegate.getClientInfo(name);
    }
    
    @Override
    public Properties getClientInfo() throws SQLException {
        return delegate.getClientInfo();
    }
    
    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        return delegate.createArrayOf(typeName, elements);
    }
    
    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        return delegate.createStruct(typeName, attributes);
    }
    
    @Override
    public void setSchema(String schema) throws SQLException {
        delegate.setSchema(schema);
    }
    
    @Override
    public String getSchema() throws SQLException {
        return delegate.getSchema();
    }
    
    @Override
    public void abort(Executor executor) throws SQLException {
        delegate.abort(executor);
    }
    
    @Override
    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
        delegate.setNetworkTimeout(executor, milliseconds);
    }
    
    @Override
    public int getNetworkTimeout() throws SQLException {
        return delegate.getNetworkTimeout();
    }
    
    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        if (iface.isAssignableFrom(getClass())) {
            return iface.cast(this);
        }
        return delegate.unwrap(iface);
    }
    
    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        if (iface.isAssignableFrom(getClass())) {
            return true;
        }
        return delegate.isWrapperFor(iface);
    }
}