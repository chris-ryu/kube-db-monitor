spring:
  application:
    name: university-course-registration
  
  # Database Configuration
  datasource:
    url: jdbc:postgresql://postgres-cluster-rw.postgres-system:5432/university
    driver-class-name: org.postgresql.Driver
    username: postgres
    password: postgres
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      pool-name: CourseRegistrationCP
      auto-commit: false
      
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        generate_statistics: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        
  # Cache Configuration
  cache:
    type: simple
    
  # Security Configuration
  security:
    user:
      name: admin
      password: admin123
      roles: ADMIN

# Server Configuration
server:
  port: 8080
  servlet:
    context-path: /
    
# Management Endpoints
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: university-course-registration
      
# Logging Configuration
logging:
  level:
    com.university.registration: DEBUG
    org.springframework.web: INFO
    org.springframework.security: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    
# Custom Application Properties
app:
  registration:
    max-concurrent-enrollments: 10
    enrollment-timeout-seconds: 30
    cache-ttl-seconds: 300
    # Data initialization settings
    initialize-sample-data: true
    data-init-batch-size: 100
    
# KubeDB Monitor Annotations (for Kubernetes deployment)
metadata:
  annotations:
    kubedb.monitor/enable: "true"
    kubedb.monitor/db-types: "postgresql"
    kubedb.monitor/sampling-rate: "1.0"
    kubedb.monitor/slow-query-threshold: "500"
    kubedb.monitor/collector-type: "logging"

---
# Development Profile
spring:
  config:
    activate:
      on-profile: development
      
  jpa:
    show-sql: true
    properties:
      hibernate:
        generate_statistics: true
        
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    
---
# Production Profile
spring:
  config:
    activate:
      on-profile: production
      
  jpa:
    show-sql: false
    properties:
      hibernate:
        generate_statistics: false
        
logging:
  level:
    com.university.registration: INFO
    org.hibernate.SQL: WARN
    
---
# Testing Profile
spring:
  config:
    activate:
      on-profile: test
      
  datasource:
    url: jdbc:postgresql://localhost:5432/university_test
    driver-class-name: org.postgresql.Driver
    username: postgres
    password: postgres
    
  jpa:
    hibernate:
      ddl-auto: create-drop
      
# KubeDB Monitor specific for testing
metadata:
  annotations:
    kubedb.monitor/sampling-rate: "0.1"
    kubedb.monitor/slow-query-threshold: "100"

---
# Kubernetes Profile
spring:
  config:
    activate:
      on-profile: kubernetes
      
  datasource:
    url: jdbc:postgresql://postgres-cluster-rw.postgres-system:5432/university
    driver-class-name: org.postgresql.Driver
    username: postgres
    password: postgres
    hikari:
      maximum-pool-size: 30
      minimum-idle: 10
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      
  jpa:
    show-sql: true
    properties:
      hibernate:
        generate_statistics: true
        jdbc:
          batch_size: 50
        
  security:
    user:
      name: admin
      password: ${ADMIN_PASSWORD:admin123}
      
# Server Configuration
server:
  port: 8080
  
# Management Endpoints for Kubernetes
management:
  endpoints:
    web:
      exposure:
        include: "health,info,metrics,prometheus"
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
        
# Application specific for Kubernetes
app:
  registration:
    initialize-sample-data: true
    data-init-batch-size: 200
    max-concurrent-enrollments: 50
    enrollment-timeout-seconds: 60
    
# Logging for Kubernetes
logging:
  level:
    com.university.registration: INFO
    org.hibernate.SQL: INFO
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
  file:
    name: /app/logs/application.log