apiVersion: apps/v1
kind: Deployment
metadata:
  name: university-registration
  namespace: kubedb-monitor-test
  labels:
    app: university-registration
    version: v1.0.0
    component: sample-app
    managed-by: kubedb-monitor
spec:
  replicas: 2
  selector:
    matchLabels:
      app: university-registration
  template:
    metadata:
      labels:
        app: university-registration
        version: v1.0.0
      annotations:
        # KubeDB Monitor 활성화 및 설정
        kubedb.monitor/enable: "true"
        kubedb.monitor/db-types: "h2"
        kubedb.monitor/sampling-rate: "1.0"
        kubedb.monitor/slow-query-threshold: "200"
        kubedb.monitor/collector-type: "logging"
        kubedb.monitor/metrics-format: "json"
        
        # 추가 모니터링 설정
        kubedb.monitor/batch-size: "100"
        kubedb.monitor/flush-interval: "5s"
        kubedb.monitor/enable-stack-trace: "true"
        kubedb.monitor/log-level: "DEBUG"
        
        # Prometheus 스크래핑 활성화
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      serviceAccountName: university-registration
      containers:
      - name: university-registration
        image: registry.bitgaram.info/kubedb-monitor/university-registration:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        - name: JAVA_OPTS
          value: "-Xmx1g -Xms512m -XX:+UseG1GC"
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: university-registration-secret
              key: admin-password
        - name: SERVER_PORT
          value: "8080"
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 15
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
      volumes:
      - name: logs-volume
        emptyDir: {}
      imagePullSecrets:
      - name: registry-secret
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
      restartPolicy: Always
      terminationGracePeriodSeconds: 60

---
apiVersion: v1
kind: Service
metadata:
  name: university-registration-service
  namespace: kubedb-monitor-test
  labels:
    app: university-registration
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/actuator/prometheus"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: university-registration

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: university-registration-ingress
  namespace: kubedb-monitor-test
  labels:
    app: university-registration
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
  - host: university-registration.bitgaram.info
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: university-registration-service
            port:
              number: 80